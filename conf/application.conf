# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = pensions-scheme-migration

# this key is for local development only!
queryParameter.encryption.key="gvBoGdgzqG1AarzF1LY0zQ=="

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Akka-based Poller to control DMS submission throughput
play.modules.enabled += "module.RacDacBulkSubmissionModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Country Code List
location.canonical.list.all = "location-autocomplete-canonical-list.json"

# Microservice specific config

play.http.parser.maxMemoryBuffer = 10M
play.ws.timeout.request: 20s

serviceUrls {
      if {
          list.of.schemes = "/pension-schemes/schemes/%s"
          legacy.scheme.details="/pension-schemes/schemes/%s/GetSchemeDetails?psaId=%s"
          scheme.register = "/pension-online/scheme-subscription/pods/%s"
      }
  }

racDacWorkItem {
      submission-poller {
          jitter-period = 5 seconds
          initial-delay = 30 seconds
          interval = 8 seconds
          failure-count-limit = 10
          in-progress-retry-after = 1000 # milliseconds as required by work-item-repo library
          mongo {
              ttl = 28 days
          }
      }
      backscan.enabled = true
      fork-join-executor {
        parallelism-factor = 20.0
        parallelism-max = 200
      }
}

mongodb {
  uri = "mongodb://localhost:27017/pensions-scheme-migration"
  migration-cache {
      maxSize = 512000

      admin-data {
         name = admin-data
      }
      
      toggle-data {
         name = toggle-data
      }

      data-cache {
          name = migration-data
          timeToLiveInDays = 28
      }

      list-of-legacy-schemes {
          name = list-of-legacy-schemes
          timeToLiveInSeconds = 7200
      }

      lock-cache {
          name = migration-lock
          timeToLiveInSeconds = 900
      }

      rac-dac-requests-queue-events-log {
          name = rac-dac-requests-queue-events-log
          timeToLiveInSeconds = 3600
      }

      racDac-work-item-queue {
          name = racDac-work-item
      }

      scheme-data-cache {
          name = scheme-data
          timeToLiveInDays = 28
      }

      declaration-lock {
          name = declaration-lock
          timeToLiveInSeconds = 60
      }
  }
}

urls {
    get-psa-min-details = "/pension-administrator/get-minimal-psa"
}

dms-submission-poller-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

microservice {

  services {
    auth {
      host = localhost
      port = 8500
    }

    if-hod {
      host = localhost
      port = 8202
      env = "ist0"
      authorizationToken = "local"
    }

    pension-administrator {
      host = localhost
      port = 8205
    }

    pensions-scheme-migration {
        host = localhost
        port = 8214
    }

    email {
          host = localhost
          port = 8300
    }
  }

}

email.bulkMigrationConfirmationTemplateId = "pods_racdac_bulk_migration_confirmation"
email.force = false
